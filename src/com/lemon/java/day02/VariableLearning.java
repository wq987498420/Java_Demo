package com.lemon.java.day02;
/*
类：
    1.在java中用class来定义一个类，类是java程序的基本单位
    2.类描述的是具有共性的一类事物，所以我们又可以把类称作模板技术

    如何理解共性：
        1.具有相同的属性-->java变量
        2.具有相同的行为-->java函数
    类的组成：
        1.变量：
            变量就是用来储存数据的
            变量名命名规范：变量命名可以是以数字，字母，某些特殊字符组成的组合，就但是不能以数字开头（最好以字母开头，不能用大写字母开头）
            变量类型：
                基本数据类型变量：八大基本数据类型
                byte：（一个字节-->8位-->能够表示一个8位的二进制数，二进制换成十进制（1*2^（所在位数减一）））
                        1.逻辑类型：
                            boolean(布尔型)，取值范围 true false
                        2.整型
                            byte（字节型），取值范围：-128~127 （一个字节）
                            short（短整型），取值范围：-32768~32767 （两个字节）
                            int（整形），取值范围：-2147483648~2147483647 （四个字节）
                            long（长整型），取值范围：-9223372036854775808~9223372036854775807 （八个字节）
                        3.浮点型
                            float（单精度的浮点型），取值范围：1.4E-45~3.4028235E38 （四个字节）
                            double（双精度的浮点型），取值范围：4.9E-324~1.7976931348623157E308 （八个字节）
                        4.字符型
                            char（字符型）：char类型的变量，赋值的时候数据长度只能是一位，并且用“”包起来 （两个字节）
                引用数据类型变量：引用类型的变量它就是指一个内存地址，一个位置信息（就就相当于门牌号）
                        数组：
                            数据是一种数据结构，它是一个容器，用来盛放数据，不同类型的数组可以盛放

                        类：
                            如果我们定义了一个变量，变量前面的类型声明是一个类名，那此变量的类型为引用类型
                            字符串 String 就是一个类  所以我们将字符串类型称之为引用类型的变量
                        接口
                        枚举








        2.函数
 */
public class VariableLearning {

public static void main(String[] args) {
    //定义布尔类型变量：true,false
    boolean aa=false;  //=表示赋值运算符
    //整形
    byte bb =1;
    short  cc = 2;
    int  dd = 3;
    long  ee = 4;
    //浮点型
    float ff = 3.14f; //小数默认被提升位double类型，这个过程叫类型向上自动提升，但是左边变量的类型声明是
    float ii = (float)3.14; //float，因此大类型转化成小类型，必须要向下强制转换，此过程是需要手动强制完成
    double gg = 3.14;
    //字符型
    char hh = '1'; //字符型要用单引号，数据长度只能以为（双引号是字符串型）

    //引用类型
    String name="王小明";
    int age = 24;
    System.out.println(name+age);


}
}
